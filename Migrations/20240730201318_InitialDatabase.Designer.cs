// <auto-generated />
using System;
using Cooliemint.ApiServer.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Cooliemint.ApiServer.Migrations
{
    [DbContext(typeof(CooliemintDbContext))]
    [Migration("20240730201318_InitialDatabase")]
    partial class InitialDatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Cooliemint.ApiServer.Models.ContactProvider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Configuration")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ContactProviders");
                });

            modelBuilder.Entity("Cooliemint.ApiServer.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Cooliemint.ApiServer.Models.NotificationDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Icon")
                        .HasColumnType("longtext");

                    b.Property<string>("LongDescription")
                        .HasColumnType("longtext");

                    b.Property<int>("NotificationId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Url")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("NotificationId");

                    b.ToTable("NotificationDetails");
                });

            modelBuilder.Entity("Cooliemint.ApiServer.Models.RuleCommand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CommandType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("RuleModelId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("RuleModelId");

                    b.ToTable("RuleCommands");
                });

            modelBuilder.Entity("Cooliemint.ApiServer.Models.RuleModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsExecuted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastExecuted")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Rules");
                });

            modelBuilder.Entity("Cooliemint.ApiServer.Models.RuleNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("NotificationId")
                        .HasColumnType("int");

                    b.Property<int>("RuleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NotificationId");

                    b.HasIndex("RuleId");

                    b.ToTable("RuleNotifications");
                });

            modelBuilder.Entity("Cooliemint.ApiServer.Models.RulePartModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Descriptor")
                        .HasColumnType("int");

                    b.Property<string>("OperandLeft")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("OperandRight")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Operation")
                        .HasColumnType("int");

                    b.Property<int?>("RuleModelId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RuleModelId");

                    b.ToTable("RuleParts");
                });

            modelBuilder.Entity("Cooliemint.ApiServer.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Cooliemint.ApiServer.Models.UserContactProvider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ContactProviderId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContactProviderId");

                    b.HasIndex("UserId");

                    b.ToTable("UserContactProviders");
                });

            modelBuilder.Entity("Cooliemint.ApiServer.Models.UserNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("NotificationId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NotificationId");

                    b.HasIndex("UserId");

                    b.ToTable("UserNotifications");
                });

            modelBuilder.Entity("Cooliemint.ApiServer.Models.NotificationDetails", b =>
                {
                    b.HasOne("Cooliemint.ApiServer.Models.Notification", "Notification")
                        .WithMany("Details")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Notification");
                });

            modelBuilder.Entity("Cooliemint.ApiServer.Models.RuleCommand", b =>
                {
                    b.HasOne("Cooliemint.ApiServer.Models.RuleModel", null)
                        .WithMany("Commands")
                        .HasForeignKey("RuleModelId");
                });

            modelBuilder.Entity("Cooliemint.ApiServer.Models.RuleNotification", b =>
                {
                    b.HasOne("Cooliemint.ApiServer.Models.Notification", "Notification")
                        .WithMany("RuleNotifications")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cooliemint.ApiServer.Models.RuleModel", "Rule")
                        .WithMany("Notifications")
                        .HasForeignKey("RuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Notification");

                    b.Navigation("Rule");
                });

            modelBuilder.Entity("Cooliemint.ApiServer.Models.RulePartModel", b =>
                {
                    b.HasOne("Cooliemint.ApiServer.Models.RuleModel", null)
                        .WithMany("Parts")
                        .HasForeignKey("RuleModelId");
                });

            modelBuilder.Entity("Cooliemint.ApiServer.Models.UserContactProvider", b =>
                {
                    b.HasOne("Cooliemint.ApiServer.Models.ContactProvider", "ContactProvider")
                        .WithMany()
                        .HasForeignKey("ContactProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cooliemint.ApiServer.Models.User", "User")
                        .WithMany("ContactProviders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContactProvider");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Cooliemint.ApiServer.Models.UserNotification", b =>
                {
                    b.HasOne("Cooliemint.ApiServer.Models.Notification", "Notification")
                        .WithMany("UserNotifications")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cooliemint.ApiServer.Models.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Notification");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Cooliemint.ApiServer.Models.Notification", b =>
                {
                    b.Navigation("Details");

                    b.Navigation("RuleNotifications");

                    b.Navigation("UserNotifications");
                });

            modelBuilder.Entity("Cooliemint.ApiServer.Models.RuleModel", b =>
                {
                    b.Navigation("Commands");

                    b.Navigation("Notifications");

                    b.Navigation("Parts");
                });

            modelBuilder.Entity("Cooliemint.ApiServer.Models.User", b =>
                {
                    b.Navigation("ContactProviders");

                    b.Navigation("Notifications");
                });
#pragma warning restore 612, 618
        }
    }
}
